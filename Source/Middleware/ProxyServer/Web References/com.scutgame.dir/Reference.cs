//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1008
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.1008 版自动生成。
// 
#pragma warning disable 1591

namespace ProxyServer.com.scutgame.dir {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DirServiceSoap", Namespace="http://dir.scutgame.com/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IItemChangeEvent))]
    public partial class DirService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetOfficialGameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGameObjOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGameInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddGameOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddGameNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerObjOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerSortListOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveGameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetActiveNumOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReloadServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGameNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetServerEnableDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnableServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback ServerStatusOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DirService() {
            this.Url = global::ProxyServer.Properties.Settings.Default.ProxyServer_com_scutgame_dir_DirService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetOfficialGameCompletedEventHandler GetOfficialGameCompleted;
        
        /// <remarks/>
        public event GetGameObjCompletedEventHandler GetGameObjCompleted;
        
        /// <remarks/>
        public event GetGameCompletedEventHandler GetGameCompleted;
        
        /// <remarks/>
        public event GetGameInfoCompletedEventHandler GetGameInfoCompleted;
        
        /// <remarks/>
        public event AddGameCompletedEventHandler AddGameCompleted;
        
        /// <remarks/>
        public event AddGameNewCompletedEventHandler AddGameNewCompleted;
        
        /// <remarks/>
        public event AddServerCompletedEventHandler AddServerCompleted;
        
        /// <remarks/>
        public event SetServerCompletedEventHandler SetServerCompleted;
        
        /// <remarks/>
        public event GetServerObjCompletedEventHandler GetServerObjCompleted;
        
        /// <remarks/>
        public event GetServersCompletedEventHandler GetServersCompleted;
        
        /// <remarks/>
        public event GetServerListCompletedEventHandler GetServerListCompleted;
        
        /// <remarks/>
        public event GetServerSortListCompletedEventHandler GetServerSortListCompleted;
        
        /// <remarks/>
        public event RemoveServerCompletedEventHandler RemoveServerCompleted;
        
        /// <remarks/>
        public event RemoveGameCompletedEventHandler RemoveGameCompleted;
        
        /// <remarks/>
        public event SetActiveNumCompletedEventHandler SetActiveNumCompleted;
        
        /// <remarks/>
        public event ReloadServerCompletedEventHandler ReloadServerCompleted;
        
        /// <remarks/>
        public event GetGameNameCompletedEventHandler GetGameNameCompleted;
        
        /// <remarks/>
        public event GetServerNameCompletedEventHandler GetServerNameCompleted;
        
        /// <remarks/>
        public event SetServerEnableDateCompletedEventHandler SetServerEnableDateCompleted;
        
        /// <remarks/>
        public event EnableServerCompletedEventHandler EnableServerCompleted;
        
        /// <remarks/>
        public event ServerStatusCompletedEventHandler ServerStatusCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dir.scutgame.com/GetOfficialGame", RequestNamespace="http://dir.scutgame.com/", ResponseNamespace="http://dir.scutgame.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GameInfo[] GetOfficialGame() {
            object[] results = this.Invoke("GetOfficialGame", new object[0]);
            return ((GameInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetOfficialGameAsync() {
            this.GetOfficialGameAsync(null);
        }
        
        /// <remarks/>
        public void GetOfficialGameAsync(object userState) {
            if ((this.GetOfficialGameOperationCompleted == null)) {
                this.GetOfficialGameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOfficialGameOperationCompleted);
            }
            this.InvokeAsync("GetOfficialGame", new object[0], this.GetOfficialGameOperationCompleted, userState);
        }
        
        private void OnGetOfficialGameOperationCompleted(object arg) {
            if ((this.GetOfficialGameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOfficialGameCompleted(this, new GetOfficialGameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dir.scutgame.com/GetGameObj", RequestNamespace="http://dir.scutgame.com/", ResponseNamespace="http://dir.scutgame.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GameInfo GetGameObj(int gameID) {
            object[] results = this.Invoke("GetGameObj", new object[] {
                        gameID});
            return ((GameInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetGameObjAsync(int gameID) {
            this.GetGameObjAsync(gameID, null);
        }
        
        /// <remarks/>
        public void GetGameObjAsync(int gameID, object userState) {
            if ((this.GetGameObjOperationCompleted == null)) {
                this.GetGameObjOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGameObjOperationCompleted);
            }
            this.InvokeAsync("GetGameObj", new object[] {
                        gameID}, this.GetGameObjOperationCompleted, userState);
        }
        
        private void OnGetGameObjOperationCompleted(object arg) {
            if ((this.GetGameObjCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGameObjCompleted(this, new GetGameObjCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dir.scutgame.com/GetGame", RequestNamespace="http://dir.scutgame.com/", ResponseNamespace="http://dir.scutgame.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GameInfo[] GetGame() {
            object[] results = this.Invoke("GetGame", new object[0]);
            return ((GameInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetGameAsync() {
            this.GetGameAsync(null);
        }
        
        /// <remarks/>
        public void GetGameAsync(object userState) {
            if ((this.GetGameOperationCompleted == null)) {
                this.GetGameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGameOperationCompleted);
            }
            this.InvokeAsync("GetGame", new object[0], this.GetGameOperationCompleted, userState);
        }
        
        private void OnGetGameOperationCompleted(object arg) {
            if ((this.GetGameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGameCompleted(this, new GetGameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dir.scutgame.com/GetGameInfo", RequestNamespace="http://dir.scutgame.com/", ResponseNamespace="http://dir.scutgame.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GameInfo GetGameInfo(int gameId) {
            object[] results = this.Invoke("GetGameInfo", new object[] {
                        gameId});
            return ((GameInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetGameInfoAsync(int gameId) {
            this.GetGameInfoAsync(gameId, null);
        }
        
        /// <remarks/>
        public void GetGameInfoAsync(int gameId, object userState) {
            if ((this.GetGameInfoOperationCompleted == null)) {
                this.GetGameInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGameInfoOperationCompleted);
            }
            this.InvokeAsync("GetGameInfo", new object[] {
                        gameId}, this.GetGameInfoOperationCompleted, userState);
        }
        
        private void OnGetGameInfoOperationCompleted(object arg) {
            if ((this.GetGameInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGameInfoCompleted(this, new GetGameInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dir.scutgame.com/AddGame", RequestNamespace="http://dir.scutgame.com/", ResponseNamespace="http://dir.scutgame.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddGame(int gameID, string gameName) {
            this.Invoke("AddGame", new object[] {
                        gameID,
                        gameName});
        }
        
        /// <remarks/>
        public void AddGameAsync(int gameID, string gameName) {
            this.AddGameAsync(gameID, gameName, null);
        }
        
        /// <remarks/>
        public void AddGameAsync(int gameID, string gameName, object userState) {
            if ((this.AddGameOperationCompleted == null)) {
                this.AddGameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddGameOperationCompleted);
            }
            this.InvokeAsync("AddGame", new object[] {
                        gameID,
                        gameName}, this.AddGameOperationCompleted, userState);
        }
        
        private void OnAddGameOperationCompleted(object arg) {
            if ((this.AddGameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddGameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dir.scutgame.com/AddGameNew", RequestNamespace="http://dir.scutgame.com/", ResponseNamespace="http://dir.scutgame.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddGameNew(int gameID, string gameName, string currency, decimal multiple, string gameWord, string agentsID, bool isRelease, System.DateTime releaseDate, string payStyle, string SocketServer, int SocketPort) {
            this.Invoke("AddGameNew", new object[] {
                        gameID,
                        gameName,
                        currency,
                        multiple,
                        gameWord,
                        agentsID,
                        isRelease,
                        releaseDate,
                        payStyle,
                        SocketServer,
                        SocketPort});
        }
        
        /// <remarks/>
        public void AddGameNewAsync(int gameID, string gameName, string currency, decimal multiple, string gameWord, string agentsID, bool isRelease, System.DateTime releaseDate, string payStyle, string SocketServer, int SocketPort) {
            this.AddGameNewAsync(gameID, gameName, currency, multiple, gameWord, agentsID, isRelease, releaseDate, payStyle, SocketServer, SocketPort, null);
        }
        
        /// <remarks/>
        public void AddGameNewAsync(int gameID, string gameName, string currency, decimal multiple, string gameWord, string agentsID, bool isRelease, System.DateTime releaseDate, string payStyle, string SocketServer, int SocketPort, object userState) {
            if ((this.AddGameNewOperationCompleted == null)) {
                this.AddGameNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddGameNewOperationCompleted);
            }
            this.InvokeAsync("AddGameNew", new object[] {
                        gameID,
                        gameName,
                        currency,
                        multiple,
                        gameWord,
                        agentsID,
                        isRelease,
                        releaseDate,
                        payStyle,
                        SocketServer,
                        SocketPort}, this.AddGameNewOperationCompleted, userState);
        }
        
        private void OnAddGameNewOperationCompleted(object arg) {
            if ((this.AddGameNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddGameNewCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dir.scutgame.com/AddServer", RequestNamespace="http://dir.scutgame.com/", ResponseNamespace="http://dir.scutgame.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddServer(int gameID, int serverId, string serverName, string serverUrl, string status, string intranetAddress) {
            this.Invoke("AddServer", new object[] {
                        gameID,
                        serverId,
                        serverName,
                        serverUrl,
                        status,
                        intranetAddress});
        }
        
        /// <remarks/>
        public void AddServerAsync(int gameID, int serverId, string serverName, string serverUrl, string status, string intranetAddress) {
            this.AddServerAsync(gameID, serverId, serverName, serverUrl, status, intranetAddress, null);
        }
        
        /// <remarks/>
        public void AddServerAsync(int gameID, int serverId, string serverName, string serverUrl, string status, string intranetAddress, object userState) {
            if ((this.AddServerOperationCompleted == null)) {
                this.AddServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddServerOperationCompleted);
            }
            this.InvokeAsync("AddServer", new object[] {
                        gameID,
                        serverId,
                        serverName,
                        serverUrl,
                        status,
                        intranetAddress}, this.AddServerOperationCompleted, userState);
        }
        
        private void OnAddServerOperationCompleted(object arg) {
            if ((this.AddServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddServerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dir.scutgame.com/SetServer", RequestNamespace="http://dir.scutgame.com/", ResponseNamespace="http://dir.scutgame.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetServer(int serverID, int gameID, string serverName, string serverUrl, string status, int weight, string intranetAddress) {
            this.Invoke("SetServer", new object[] {
                        serverID,
                        gameID,
                        serverName,
                        serverUrl,
                        status,
                        weight,
                        intranetAddress});
        }
        
        /// <remarks/>
        public void SetServerAsync(int serverID, int gameID, string serverName, string serverUrl, string status, int weight, string intranetAddress) {
            this.SetServerAsync(serverID, gameID, serverName, serverUrl, status, weight, intranetAddress, null);
        }
        
        /// <remarks/>
        public void SetServerAsync(int serverID, int gameID, string serverName, string serverUrl, string status, int weight, string intranetAddress, object userState) {
            if ((this.SetServerOperationCompleted == null)) {
                this.SetServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetServerOperationCompleted);
            }
            this.InvokeAsync("SetServer", new object[] {
                        serverID,
                        gameID,
                        serverName,
                        serverUrl,
                        status,
                        weight,
                        intranetAddress}, this.SetServerOperationCompleted, userState);
        }
        
        private void OnSetServerOperationCompleted(object arg) {
            if ((this.SetServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetServerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dir.scutgame.com/GetServerObj", RequestNamespace="http://dir.scutgame.com/", ResponseNamespace="http://dir.scutgame.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ServerInfo GetServerObj(int gameID, int serverId) {
            object[] results = this.Invoke("GetServerObj", new object[] {
                        gameID,
                        serverId});
            return ((ServerInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerObjAsync(int gameID, int serverId) {
            this.GetServerObjAsync(gameID, serverId, null);
        }
        
        /// <remarks/>
        public void GetServerObjAsync(int gameID, int serverId, object userState) {
            if ((this.GetServerObjOperationCompleted == null)) {
                this.GetServerObjOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerObjOperationCompleted);
            }
            this.InvokeAsync("GetServerObj", new object[] {
                        gameID,
                        serverId}, this.GetServerObjOperationCompleted, userState);
        }
        
        private void OnGetServerObjOperationCompleted(object arg) {
            if ((this.GetServerObjCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerObjCompleted(this, new GetServerObjCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dir.scutgame.com/GetServers", RequestNamespace="http://dir.scutgame.com/", ResponseNamespace="http://dir.scutgame.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ServerInfo[] GetServers(int gameID, bool isSort, bool isEnable) {
            object[] results = this.Invoke("GetServers", new object[] {
                        gameID,
                        isSort,
                        isEnable});
            return ((ServerInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetServersAsync(int gameID, bool isSort, bool isEnable) {
            this.GetServersAsync(gameID, isSort, isEnable, null);
        }
        
        /// <remarks/>
        public void GetServersAsync(int gameID, bool isSort, bool isEnable, object userState) {
            if ((this.GetServersOperationCompleted == null)) {
                this.GetServersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServersOperationCompleted);
            }
            this.InvokeAsync("GetServers", new object[] {
                        gameID,
                        isSort,
                        isEnable}, this.GetServersOperationCompleted, userState);
        }
        
        private void OnGetServersOperationCompleted(object arg) {
            if ((this.GetServersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServersCompleted(this, new GetServersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dir.scutgame.com/GetServerList", RequestNamespace="http://dir.scutgame.com/", ResponseNamespace="http://dir.scutgame.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ServerInfo[] GetServerList(int gameID) {
            object[] results = this.Invoke("GetServerList", new object[] {
                        gameID});
            return ((ServerInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetServerListAsync(int gameID) {
            this.GetServerListAsync(gameID, null);
        }
        
        /// <remarks/>
        public void GetServerListAsync(int gameID, object userState) {
            if ((this.GetServerListOperationCompleted == null)) {
                this.GetServerListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerListOperationCompleted);
            }
            this.InvokeAsync("GetServerList", new object[] {
                        gameID}, this.GetServerListOperationCompleted, userState);
        }
        
        private void OnGetServerListOperationCompleted(object arg) {
            if ((this.GetServerListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerListCompleted(this, new GetServerListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dir.scutgame.com/GetServerSortList", RequestNamespace="http://dir.scutgame.com/", ResponseNamespace="http://dir.scutgame.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ServerInfo[] GetServerSortList(int gameID) {
            object[] results = this.Invoke("GetServerSortList", new object[] {
                        gameID});
            return ((ServerInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetServerSortListAsync(int gameID) {
            this.GetServerSortListAsync(gameID, null);
        }
        
        /// <remarks/>
        public void GetServerSortListAsync(int gameID, object userState) {
            if ((this.GetServerSortListOperationCompleted == null)) {
                this.GetServerSortListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerSortListOperationCompleted);
            }
            this.InvokeAsync("GetServerSortList", new object[] {
                        gameID}, this.GetServerSortListOperationCompleted, userState);
        }
        
        private void OnGetServerSortListOperationCompleted(object arg) {
            if ((this.GetServerSortListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerSortListCompleted(this, new GetServerSortListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dir.scutgame.com/RemoveServer", RequestNamespace="http://dir.scutgame.com/", ResponseNamespace="http://dir.scutgame.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveServer(int gameID, int serverID) {
            this.Invoke("RemoveServer", new object[] {
                        gameID,
                        serverID});
        }
        
        /// <remarks/>
        public void RemoveServerAsync(int gameID, int serverID) {
            this.RemoveServerAsync(gameID, serverID, null);
        }
        
        /// <remarks/>
        public void RemoveServerAsync(int gameID, int serverID, object userState) {
            if ((this.RemoveServerOperationCompleted == null)) {
                this.RemoveServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveServerOperationCompleted);
            }
            this.InvokeAsync("RemoveServer", new object[] {
                        gameID,
                        serverID}, this.RemoveServerOperationCompleted, userState);
        }
        
        private void OnRemoveServerOperationCompleted(object arg) {
            if ((this.RemoveServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveServerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dir.scutgame.com/RemoveGame", RequestNamespace="http://dir.scutgame.com/", ResponseNamespace="http://dir.scutgame.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveGame(int gameID) {
            this.Invoke("RemoveGame", new object[] {
                        gameID});
        }
        
        /// <remarks/>
        public void RemoveGameAsync(int gameID) {
            this.RemoveGameAsync(gameID, null);
        }
        
        /// <remarks/>
        public void RemoveGameAsync(int gameID, object userState) {
            if ((this.RemoveGameOperationCompleted == null)) {
                this.RemoveGameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveGameOperationCompleted);
            }
            this.InvokeAsync("RemoveGame", new object[] {
                        gameID}, this.RemoveGameOperationCompleted, userState);
        }
        
        private void OnRemoveGameOperationCompleted(object arg) {
            if ((this.RemoveGameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveGameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dir.scutgame.com/SetActiveNum", RequestNamespace="http://dir.scutgame.com/", ResponseNamespace="http://dir.scutgame.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetActiveNum(int serverID, int gameID, int activeNum) {
            this.Invoke("SetActiveNum", new object[] {
                        serverID,
                        gameID,
                        activeNum});
        }
        
        /// <remarks/>
        public void SetActiveNumAsync(int serverID, int gameID, int activeNum) {
            this.SetActiveNumAsync(serverID, gameID, activeNum, null);
        }
        
        /// <remarks/>
        public void SetActiveNumAsync(int serverID, int gameID, int activeNum, object userState) {
            if ((this.SetActiveNumOperationCompleted == null)) {
                this.SetActiveNumOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetActiveNumOperationCompleted);
            }
            this.InvokeAsync("SetActiveNum", new object[] {
                        serverID,
                        gameID,
                        activeNum}, this.SetActiveNumOperationCompleted, userState);
        }
        
        private void OnSetActiveNumOperationCompleted(object arg) {
            if ((this.SetActiveNumCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetActiveNumCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dir.scutgame.com/ReloadServer", RequestNamespace="http://dir.scutgame.com/", ResponseNamespace="http://dir.scutgame.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ReloadServer(int gameID) {
            object[] results = this.Invoke("ReloadServer", new object[] {
                        gameID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ReloadServerAsync(int gameID) {
            this.ReloadServerAsync(gameID, null);
        }
        
        /// <remarks/>
        public void ReloadServerAsync(int gameID, object userState) {
            if ((this.ReloadServerOperationCompleted == null)) {
                this.ReloadServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReloadServerOperationCompleted);
            }
            this.InvokeAsync("ReloadServer", new object[] {
                        gameID}, this.ReloadServerOperationCompleted, userState);
        }
        
        private void OnReloadServerOperationCompleted(object arg) {
            if ((this.ReloadServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReloadServerCompleted(this, new ReloadServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dir.scutgame.com/GetGameName", RequestNamespace="http://dir.scutgame.com/", ResponseNamespace="http://dir.scutgame.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetGameName(int gameID) {
            object[] results = this.Invoke("GetGameName", new object[] {
                        gameID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetGameNameAsync(int gameID) {
            this.GetGameNameAsync(gameID, null);
        }
        
        /// <remarks/>
        public void GetGameNameAsync(int gameID, object userState) {
            if ((this.GetGameNameOperationCompleted == null)) {
                this.GetGameNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGameNameOperationCompleted);
            }
            this.InvokeAsync("GetGameName", new object[] {
                        gameID}, this.GetGameNameOperationCompleted, userState);
        }
        
        private void OnGetGameNameOperationCompleted(object arg) {
            if ((this.GetGameNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGameNameCompleted(this, new GetGameNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dir.scutgame.com/GetServerName", RequestNamespace="http://dir.scutgame.com/", ResponseNamespace="http://dir.scutgame.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServerName(int gameID, int serverID) {
            object[] results = this.Invoke("GetServerName", new object[] {
                        gameID,
                        serverID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerNameAsync(int gameID, int serverID) {
            this.GetServerNameAsync(gameID, serverID, null);
        }
        
        /// <remarks/>
        public void GetServerNameAsync(int gameID, int serverID, object userState) {
            if ((this.GetServerNameOperationCompleted == null)) {
                this.GetServerNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerNameOperationCompleted);
            }
            this.InvokeAsync("GetServerName", new object[] {
                        gameID,
                        serverID}, this.GetServerNameOperationCompleted, userState);
        }
        
        private void OnGetServerNameOperationCompleted(object arg) {
            if ((this.GetServerNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerNameCompleted(this, new GetServerNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dir.scutgame.com/SetServerEnableDate", RequestNamespace="http://dir.scutgame.com/", ResponseNamespace="http://dir.scutgame.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetServerEnableDate(int gameID, int serverID, System.DateTime enableDate) {
            this.Invoke("SetServerEnableDate", new object[] {
                        gameID,
                        serverID,
                        enableDate});
        }
        
        /// <remarks/>
        public void SetServerEnableDateAsync(int gameID, int serverID, System.DateTime enableDate) {
            this.SetServerEnableDateAsync(gameID, serverID, enableDate, null);
        }
        
        /// <remarks/>
        public void SetServerEnableDateAsync(int gameID, int serverID, System.DateTime enableDate, object userState) {
            if ((this.SetServerEnableDateOperationCompleted == null)) {
                this.SetServerEnableDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetServerEnableDateOperationCompleted);
            }
            this.InvokeAsync("SetServerEnableDate", new object[] {
                        gameID,
                        serverID,
                        enableDate}, this.SetServerEnableDateOperationCompleted, userState);
        }
        
        private void OnSetServerEnableDateOperationCompleted(object arg) {
            if ((this.SetServerEnableDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetServerEnableDateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dir.scutgame.com/EnableServer", RequestNamespace="http://dir.scutgame.com/", ResponseNamespace="http://dir.scutgame.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EnableServer(int gameID, int serverID, bool isEnable) {
            this.Invoke("EnableServer", new object[] {
                        gameID,
                        serverID,
                        isEnable});
        }
        
        /// <remarks/>
        public void EnableServerAsync(int gameID, int serverID, bool isEnable) {
            this.EnableServerAsync(gameID, serverID, isEnable, null);
        }
        
        /// <remarks/>
        public void EnableServerAsync(int gameID, int serverID, bool isEnable, object userState) {
            if ((this.EnableServerOperationCompleted == null)) {
                this.EnableServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnableServerOperationCompleted);
            }
            this.InvokeAsync("EnableServer", new object[] {
                        gameID,
                        serverID,
                        isEnable}, this.EnableServerOperationCompleted, userState);
        }
        
        private void OnEnableServerOperationCompleted(object arg) {
            if ((this.EnableServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnableServerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dir.scutgame.com/ServerStatus", RequestNamespace="http://dir.scutgame.com/", ResponseNamespace="http://dir.scutgame.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ServerStatus(int gameID, int serverID, int Status) {
            this.Invoke("ServerStatus", new object[] {
                        gameID,
                        serverID,
                        Status});
        }
        
        /// <remarks/>
        public void ServerStatusAsync(int gameID, int serverID, int Status) {
            this.ServerStatusAsync(gameID, serverID, Status, null);
        }
        
        /// <remarks/>
        public void ServerStatusAsync(int gameID, int serverID, int Status, object userState) {
            if ((this.ServerStatusOperationCompleted == null)) {
                this.ServerStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServerStatusOperationCompleted);
            }
            this.InvokeAsync("ServerStatus", new object[] {
                        gameID,
                        serverID,
                        Status}, this.ServerStatusOperationCompleted, userState);
        }
        
        private void OnServerStatusOperationCompleted(object arg) {
            if ((this.ServerStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ServerStatusCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://dir.scutgame.com/")]
    public partial class GameInfo : MemoryEntity {
        
        private int idField;
        
        private string nameField;
        
        private string currencyField;
        
        private decimal multipleField;
        
        private string gameWordField;
        
        private string agentsIDField;
        
        private bool isReleaseField;
        
        private System.DateTime releaseDateField;
        
        private string payStyleField;
        
        private string socketServerField;
        
        private int socketPortField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Currency {
            get {
                return this.currencyField;
            }
            set {
                this.currencyField = value;
            }
        }
        
        /// <remarks/>
        public decimal Multiple {
            get {
                return this.multipleField;
            }
            set {
                this.multipleField = value;
            }
        }
        
        /// <remarks/>
        public string GameWord {
            get {
                return this.gameWordField;
            }
            set {
                this.gameWordField = value;
            }
        }
        
        /// <remarks/>
        public string AgentsID {
            get {
                return this.agentsIDField;
            }
            set {
                this.agentsIDField = value;
            }
        }
        
        /// <remarks/>
        public bool IsRelease {
            get {
                return this.isReleaseField;
            }
            set {
                this.isReleaseField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ReleaseDate {
            get {
                return this.releaseDateField;
            }
            set {
                this.releaseDateField = value;
            }
        }
        
        /// <remarks/>
        public string PayStyle {
            get {
                return this.payStyleField;
            }
            set {
                this.payStyleField = value;
            }
        }
        
        /// <remarks/>
        public string SocketServer {
            get {
                return this.socketServerField;
            }
            set {
                this.socketServerField = value;
            }
        }
        
        /// <remarks/>
        public int SocketPort {
            get {
                return this.socketPortField;
            }
            set {
                this.socketPortField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServerInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GameInfo))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://dir.scutgame.com/")]
    public partial class MemoryEntity : EntityChangeEvent {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MemoryEntity))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServerInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GameInfo))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://dir.scutgame.com/")]
    public partial class EntityChangeEvent : IItemChangeEvent {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EntityChangeEvent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MemoryEntity))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServerInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GameInfo))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://dir.scutgame.com/")]
    public abstract partial class IItemChangeEvent {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://dir.scutgame.com/")]
    public partial class ServerInfo : MemoryEntity {
        
        private int idField;
        
        private int gameIDField;
        
        private string serverNameField;
        
        private string serverUrlField;
        
        private string intranetAddressField;
        
        private string statusField;
        
        private int activeNumField;
        
        private int weightField;
        
        private int targetServerField;
        
        private bool isEnableField;
        
        private System.DateTime enableDateField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int GameID {
            get {
                return this.gameIDField;
            }
            set {
                this.gameIDField = value;
            }
        }
        
        /// <remarks/>
        public string ServerName {
            get {
                return this.serverNameField;
            }
            set {
                this.serverNameField = value;
            }
        }
        
        /// <remarks/>
        public string ServerUrl {
            get {
                return this.serverUrlField;
            }
            set {
                this.serverUrlField = value;
            }
        }
        
        /// <remarks/>
        public string IntranetAddress {
            get {
                return this.intranetAddressField;
            }
            set {
                this.intranetAddressField = value;
            }
        }
        
        /// <remarks/>
        public string Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public int ActiveNum {
            get {
                return this.activeNumField;
            }
            set {
                this.activeNumField = value;
            }
        }
        
        /// <remarks/>
        public int Weight {
            get {
                return this.weightField;
            }
            set {
                this.weightField = value;
            }
        }
        
        /// <remarks/>
        public int TargetServer {
            get {
                return this.targetServerField;
            }
            set {
                this.targetServerField = value;
            }
        }
        
        /// <remarks/>
        public bool IsEnable {
            get {
                return this.isEnableField;
            }
            set {
                this.isEnableField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EnableDate {
            get {
                return this.enableDateField;
            }
            set {
                this.enableDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetOfficialGameCompletedEventHandler(object sender, GetOfficialGameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOfficialGameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOfficialGameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GameInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GameInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetGameObjCompletedEventHandler(object sender, GetGameObjCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGameObjCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGameObjCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GameInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GameInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetGameCompletedEventHandler(object sender, GetGameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GameInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GameInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetGameInfoCompletedEventHandler(object sender, GetGameInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGameInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGameInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GameInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GameInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddGameCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddGameNewCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddServerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetServerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetServerObjCompletedEventHandler(object sender, GetServerObjCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerObjCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerObjCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ServerInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServerInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetServersCompletedEventHandler(object sender, GetServersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ServerInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServerInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetServerListCompletedEventHandler(object sender, GetServerListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ServerInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServerInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetServerSortListCompletedEventHandler(object sender, GetServerSortListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerSortListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerSortListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ServerInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServerInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RemoveServerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RemoveGameCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetActiveNumCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ReloadServerCompletedEventHandler(object sender, ReloadServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReloadServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReloadServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetGameNameCompletedEventHandler(object sender, GetGameNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGameNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGameNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetServerNameCompletedEventHandler(object sender, GetServerNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetServerEnableDateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void EnableServerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ServerStatusCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591